{"version":3,"sources":["views/formModal/FormSurveyDetail.js","views/formModal/FormQuestionDetails.js","views/formModal/FormModal.js","views/dashboard/Dashboard.js"],"names":["FormSurveyDetails","props","action","method","xs","htmlFor","type","id","name","placeholder","onChange","event","val","target","value","handleChange","values","surveyname","className","description","template","custom","templates","map","index","Name","setQuestionGroup","questiongroup","questiongroups","companyname","dateFormat","selected","startdate","date","getUTCMonth","setDate","enddate","surveyvisibility","row","col","md","setFiles","defaultValue","logo","FormQuestionDetails","useEffect","setAddedQuestions","questions","useState","autoSuggest","setAutoSuggest","created_at","Date","now","options","showSuggestion","setQuestions","e","length","regex","RegExp","suggestions","sort","filter","s","test","Description","console","log","newArr","setSuggestions","question","content","cilX","onClick","removeQuestion","something","splice","handleRemoveItem","style","float","cursor","onBlur","suggestion","i","onMouseDown","innerText","questiontype","Promise","resolve","reject","option","ind","push","visiblity","then","Boolean","Text","marginBottom","removeOption","block","addOption","color","defaultQuestion","prevState","FormModal","mounted","useRef","proceed","setProceed","authContext","useContext","AuthContext","history","useHistory","publishUrl","setPublishUrl","user","step","survey","setSurvey","setQuestionGroups","setTemplates","addedQuestions","current","getStartupData","axios","get","res","data","nextStep","input","show","modal","onClose","toggle","closeButton","1","2","FormSurveyDetail","files","find","o","questionapis","tempArr","tmpArr","3","disabled","unknownQuestions","j","includes","indexOf","prevstate","pop","post","formData","FormData","Array","from","forEach","image","append","headers","getUTCFullYear","getUTCDate","owner","Startdate","Enddate","collaborators","surveyform","survey_id","postData","catch","err","Dashboard","surveys","setSurveys","setModal","a","temp","surveyData","thumbnail","previewimage","url","loadUser","sm","lg","oldArray","size","freeSet","cilPlus","to","src","overflow","whiteSpace","textOverflow","position","right","cilOptions"],"mappings":"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","file":"static/js/8.a2f543d7.chunk.js","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport {\n  CRow,\n  CCol,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CForm,\n  CFormGroup,\n  CFormText,\n  CLabel,\n  CInput,\n  CSelect,\n  CInputFile,\n} from \"@coreui/react\";\n\nconst FormSurveyDetails = (props) => (\n  <>\n    <CModalBody>\n      <CForm action=\"\" method=\"post\">\n        <CRow>\n          <CCol xs=\"7\">\n            <CFormGroup>\n              <CLabel htmlFor=\"surveyname\">Title</CLabel>\n              <CInput\n                type=\"text\"\n                id=\"surveyname\"\n                name=\"surveyname\"\n                placeholder=\"Enter Survey Title...\"\n                onChange={(event) => {\n                  const val = event.target.value;\n                  props.handleChange(val, \"surveyname\");\n                }}\n                value={props.values.surveyname}\n              />\n              <CFormText className=\"help-block\">\n                Please enter the survey title\n              </CFormText>\n            </CFormGroup>\n            <CFormGroup>\n              <CLabel htmlFor=\"description\">Description</CLabel>\n              <CInput\n                type=\"text\"\n                id=\"description\"\n                name=\"description\"\n                placeholder=\"Enter Survey Description\"\n                onChange={(event) => {\n                  const val = event.target.value;\n                  props.handleChange(val, \"description\");\n                }}\n                value={props.values.description}\n              />\n              <CFormText className=\"help-block\">*Optional</CFormText>\n            </CFormGroup>\n            <CFormGroup>\n              <CLabel htmlFor=\"template\">Template</CLabel>\n              <CSelect\n                onChange={(event) => {\n                  const val = event.target.value;\n                  props.handleChange(val, \"template\");\n                }}\n                value={props.values.template}\n                custom\n                name=\"template\"\n                id=\"template\"\n              >\n                <option value=\"null\">Please Select</option>\n                {props.templates.map((template, index) => (\n                  <option value={template.id}>{template.Name}</option>\n                ))}\n              </CSelect>\n              <CFormText className=\"help-block\">\n                Please select a template\n              </CFormText>\n            </CFormGroup>\n            <CFormGroup>\n              <CLabel htmlFor=\"questiongroup\">Question Group</CLabel>\n              <CSelect\n                onChange={(event) => {\n                  props.setQuestionGroup(event);\n                }}\n                value={props.values.questiongroup}\n                custom\n                name=\"questiongroup\"\n                id=\"questiongroup\"\n              >\n                <option value=\"null\">Please Select</option>\n                {props.questiongroups.map((questiongroup, name) => (\n                  <option value={questiongroup.Name}>\n                    {questiongroup.Name}\n                  </option>\n                ))}\n              </CSelect>\n              <CFormText className=\"help-block\">\n                Please select a question group.\n              </CFormText>\n            </CFormGroup>\n\n            <CFormGroup>\n              <CLabel htmlFor=\"companyname\">Company Name</CLabel>\n              <CInput\n                onChange={(event) => {\n                  const val = event.target.value;\n                  props.handleChange(val, \"companyname\");\n                }}\n                value={props.values.companyname}\n                type=\"text\"\n                id=\"companyname\"\n                name=\"companyname\"\n                placeholder=\"Enter Company Name\"\n              />\n              <CFormText className=\"help-block\">\n                Please enter the company name.\n              </CFormText>\n            </CFormGroup>\n          </CCol>\n          <CCol xs=\"5\">\n            <CFormGroup>\n              <CLabel htmlFor=\"startdate\">Start Date</CLabel>\n              <DatePicker\n                dateFormat=\"dd/MM/yyyy\"\n                selected={props.values.startdate}\n                onChange={(date) => {\n                  let m = date.getUTCMonth();\n                  props.setDate(date, \"startdate\");\n                }}\n              />\n\n              <CFormText className=\"help-block\">\n                Please enter survey start date.\n              </CFormText>\n            </CFormGroup>\n            <CFormGroup>\n              <CLabel htmlFor=\"enddate\">End Date</CLabel>\n              <DatePicker\n                dateFormat=\"dd/MM/yyyy\"\n                selected={props.values.enddate}\n                onChange={(date) => {\n                  props.setDate(date, \"enddate\");\n                }}\n              />\n              <CFormText className=\"help-block\">\n                Please enter survey end date.\n              </CFormText>\n            </CFormGroup>\n            <CFormGroup>\n              <CLabel htmlFor=\"surveyvisibility\">Survey Type</CLabel>\n              <CSelect\n                onChange={(event) => {\n                  const val = event.target.value;\n                  props.handleChange(val, \"surveyvisibility\");\n                }}\n                value={props.values.surveyvisibility}\n                custom\n                name=\"surveyvisibility\"\n                id=\"surveyvisibility\"\n              >\n                <option value=\"default\">Please Select</option>\n                <option value=\"public\">Public Survey</option>\n                <option value=\"private\">Private Survey</option>\n              </CSelect>\n              <CFormText className=\"help-block\">\n                Please select a question group.\n              </CFormText>\n            </CFormGroup>\n          </CCol>\n          <CCol xs=\"12\">\n            <CFormGroup row>\n              <CLabel col md=\"3\" htmlFor=\"logo\">\n                Brand Logo\n              </CLabel>\n              <CCol xs=\"12\" md=\"9\">\n                <CInputFile\n                  onChange={(event) => {\n                    props.setFiles(event, \"logo\");\n                  }}\n                  defaultValue={props.values.logo}\n                  id=\"logo\"\n                  name=\"logo\"\n                />\n              </CCol>\n            </CFormGroup>\n          </CCol>\n        </CRow>\n      </CForm>\n    </CModalBody>\n  </>\n);\n\nexport default FormSurveyDetails;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  CRow,\n  CCol,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CForm,\n  CFormGroup,\n  CFormText,\n  CLabel,\n  CInput,\n  CSelect,\n  CInputFile,\n  CCard,\n  CCardBody,\n  CCardHeader,\n} from \"@coreui/react\";\n\nimport { CIcon } from \"@coreui/icons-react\";\nimport { cilX } from \"@coreui/icons\";\n\nconst FormQuestionDetails = (props) => {\n  useEffect(() => {\n    props.setAddedQuestions(questions);\n  }, []);\n\n  const [autoSuggest, setAutoSuggest] = useState([]);\n  const [questions, setQuestions] = useState([\n    {\n      id: null,\n      description: \"\",\n      created_at: Date.now(),\n      type: \"\",\n      options: [],\n      showSuggestion: false,\n    },\n  ]);\n\n  const onChange = (index, name) => (e) => {\n    const value = e.target.value;\n    if (value.length === 0) {\n      setAutoSuggest([]);\n    } else {\n      const regex = new RegExp(`^${value}`, \"i\");\n      const suggestions = props.suggestions\n        .sort()\n        .filter((s) => regex.test(s.Description));\n      console.log(suggestions);\n      setAutoSuggest(suggestions);\n    }\n\n    let newArr = [...questions]; // copying the old datas array\n    switch (name) {\n      case \"type\":\n        newArr[index].type = e.target.value; // replace e.target.value with whatever you want to change it to\n        setQuestions(newArr); // ??\n        props.setAddedQuestions(newArr);\n        break;\n      case \"question\":\n        newArr[index].description = e.target.value;\n        setQuestions(newArr); // ??\n        props.setAddedQuestions(newArr);\n        break;\n\n      default:\n        console.log(\"default\");\n    }\n  };\n\n  // Add Question\n  const addQuestion = () => {\n    const defaultQuestion = {\n      id: null,\n      description: \"\",\n      created_at: \"\",\n      type: \"\",\n      options: [],\n    };\n    let promise = new Promise((resolve, reject) => {\n      setQuestions((prevState) => [...prevState, defaultQuestion]);\n      resolve(defaultQuestion);\n    });\n    promise.then(() => {\n      console.log(\"question added\");\n      props.setAddedQuestions((prevState) => [...prevState, defaultQuestion]);\n    });\n  };\n\n  // Remove Question\n  const handleRemoveItem = (index) => {\n    let newArr = [...questions];\n    console.log(newArr);\n    console.log(index);\n    let something = newArr.splice(index, 1);\n    console.log(something);\n    setQuestions(newArr);\n    //props.setAddedQuestions(newArr);\n  };\n\n  const setSuggestions = (index, value) => {\n    const newArr = [...questions];\n    newArr[index].showSuggestion = value;\n    setQuestions(newArr);\n  };\n\n  const removeOption = (index, i) => {\n    const newArr = [...questions];\n    console.log(`index: ${index}, i : ${i}`);\n    console.log(`option: ${questions[index].options[i]}`);\n    questions[index].options[i].visiblity = false;\n    setQuestions(newArr);\n\n    props.setAddedQuestions(newArr);\n  };\n\n  const addOption = (index) => {\n    console.log(\"Option Added\");\n    const val = {\n      option: \"\",\n      visiblity: true,\n    };\n    const newArr = [...questions];\n    newArr[index].options.push(val);\n    setQuestions(newArr);\n    props.setAddedQuestions(newArr);\n  };\n\n  const handleChange = (event, index, i) => {\n    const val = event.target.value;\n    const newArr = [...questions];\n    newArr[index].options[i].option = val;\n    setQuestions(newArr);\n\n    props.setAddedQuestions(newArr);\n  };\n\n  return (\n    <>\n      <CModalBody>\n        <CForm action=\"\" method=\"post\">\n          {questions.map((question, index) => (\n            <>\n              <CCard>\n                <CCardHeader>\n                  {`Question-${index + 1}`}\n                  <CIcon\n                    content={cilX}\n                    onClick={() => {\n                      console.log(index);\n                      props.removeQuestion(index);\n                      handleRemoveItem(index);\n                    }}\n                    style={{ float: \"right\", cursor: \"pointer\" }}\n                  />\n                </CCardHeader>\n                <CCardBody>\n                  <CFormGroup>\n                    <CRow>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor={`question-${index}`}>Question</CLabel>\n                      </CCol>\n                      <CCol xs=\"12\" md=\"9\">\n                        <CInput\n                          className=\"question\"\n                          name={`question-${index}`}\n                          onChange={onChange(index, \"question\")}\n                          placeholder=\"Question\"\n                          value={questions[index].description}\n                          onClick={() => {\n                            setSuggestions(index, true);\n                          }}\n                          onBlur={() => {\n                            setSuggestions(index, false);\n                          }}\n                        />\n                        {questions[index].showSuggestion && (\n                          <>\n                            <ul className=\"suggestions\">\n                              {autoSuggest.map((suggestion, i) => (\n                                <li\n                                  onMouseDown={(event) => {\n                                    props.setQuestions(suggestion.id, index);\n\n                                    const newArr = [...questions];\n                                    newArr[index].description =\n                                      event.target.innerText;\n                                    newArr[index].type =\n                                      suggestion.questiontype;\n                                    newArr[index].id = suggestion.id;\n\n                                    newArr[index].options = [];\n                                    let promise = new Promise(\n                                      (resolve, reject) => {\n                                        suggestion.options.map(\n                                          (option, ind) => {\n                                            newArr[index].options.push({\n                                              option: option.options,\n                                              visiblity: true,\n                                            });\n                                            if (\n                                              ind ===\n                                              suggestion.options.length - 1\n                                            ) {\n                                              resolve();\n                                            }\n                                          }\n                                        );\n                                      }\n                                    );\n                                    promise.then(() => {\n                                      setQuestions(newArr);\n                                      props.setAddedQuestions(newArr);\n                                    });\n                                  }}\n                                  className=\"sugestion-item\"\n                                >\n                                  {suggestion.Description}\n                                </li>\n                              ))}\n                            </ul>\n                          </>\n                        )}\n                        <CFormText>This is a help text</CFormText>\n                      </CCol>\n                    </CRow>\n                  </CFormGroup>\n                  <CFormGroup>\n                    <CRow>\n                      <CCol md=\"3\">\n                        <CLabel htmlFor={`question-${index}-type`}>Type</CLabel>\n                      </CCol>\n\n                      <CCol xs=\"12\" md=\"9\">\n                        <CSelect\n                          custom\n                          name={`question-${index}-type`}\n                          id=\"ccmonth\"\n                          onChange={onChange(index, \"type\")}\n                          defaultValue={questions[index].type}\n                        >\n                          {\n                            {\n                              \"Multiple Choice\": (\n                                <>\n                                  <option value=\"Text\">Text</option>\n                                  <option selected value=\"Multiple Choice\">\n                                    Multiple Choice\n                                  </option>\n                                  <option value=\"Boolean\">Boolean</option>\n                                </>\n                              ),\n                              Boolean: (\n                                <>\n                                  <option value=\"Text\">Text</option>\n                                  <option value=\"Multiple Choice\">\n                                    Multiple Choice\n                                  </option>\n                                  <option selected value=\"Boolean\">\n                                    Boolean\n                                  </option>\n                                </>\n                              ),\n                              Text: (\n                                <>\n                                  <option selected value=\"Text\">\n                                    Text\n                                  </option>\n                                  <option value=\"Multiple Choice\">\n                                    Multiple Choice\n                                  </option>\n                                  <option value=\"Boolean\">Boolean</option>\n                                </>\n                              ),\n                              \"\": (\n                                <>\n                                  <option selected value=\"\">\n                                    Please Select\n                                  </option>\n                                  <option value=\"Text\">Text</option>\n                                  <option value=\"Multiple Choice\">\n                                    Multiple Choice\n                                  </option>\n                                  <option value=\"Boolean\">Boolean</option>\n                                </>\n                              ),\n                            }[questions[index].type]\n                          }\n                        </CSelect>\n                      </CCol>\n                    </CRow>\n                  </CFormGroup>\n\n                  <CFormGroup>\n                    <CRow>\n                      {questions[index].options.map((option, i) => (\n                        <>\n                          {option.visiblity && (\n                            <>\n                              <CCol md=\"3\">\n                                <CLabel htmlFor={`question-${index}-option`}>\n                                  Option\n                                </CLabel>\n                              </CCol>\n                              <CCol xs=\"12\" md=\"8\">\n                                <CInput\n                                  onChange={(event) => {\n                                    handleChange(event, index, i);\n                                  }}\n                                  placeholder=\"Option\"\n                                  value={option.option}\n                                  style={{ marginBottom: 15 }}\n                                />\n                              </CCol>\n                              <CCol xs=\"12\" md=\"1\">\n                                <CIcon\n                                  style={{ cursor: \"pointer\" }}\n                                  content={cilX}\n                                  onClick={() => {\n                                    removeOption(index, i);\n                                  }}\n                                />\n                              </CCol>\n                            </>\n                          )}\n                        </>\n                      ))}\n                    </CRow>\n                    <CRow>\n                      <CCol xs=\"12\">\n                        <CButton\n                          block\n                          onClick={() => {\n                            addOption(index);\n                          }}\n                          color=\"primary\"\n                        >\n                          Add Option\n                        </CButton>\n                      </CCol>\n                    </CRow>\n                  </CFormGroup>\n                </CCardBody>\n              </CCard>\n            </>\n          ))}\n        </CForm>\n        <CCol xs=\"12\">\n          <CButton\n            block\n            color=\"primary\"\n            onClick={addQuestion}\n            style={{ marginBottom: 15 }}\n          >\n            Add Question\n          </CButton>\n        </CCol>\n      </CModalBody>\n    </>\n  );\n};\n\nexport default FormQuestionDetails;\n","import React, { useState, useEffect, useContext, useRef } from \"react\";\nimport {\n  CModal,\n  CModalHeader,\n  CModalFooter,\n  CButton,\n  CAlert,\n  CCard,\n  CCardBody,\n} from \"@coreui/react\";\nimport FormSurveyDetails from \"./FormSurveyDetail\";\nimport FormQuestionDetails from \"./FormQuestionDetails\";\nimport axios from \"axios\";\nimport AuthContext from \"../../context/auth/authContext\";\nimport { useHistory } from \"react-router-dom\";\n\nconst FormModal = (props) => {\n  const mounted = useRef();\n  const [proceed, setProceed] = useState(true);\n  const authContext = useContext(AuthContext);\n  const history = useHistory();\n  const [publishUrl, setPublishUrl] = useState([]);\n  const { user } = authContext;\n  const [survey, setSurvey] = useState({\n    step: 1,\n    surveyname: \"\",\n    description: \"\",\n    template: \"\",\n    questiongroup: \"\",\n    companyname: \"\",\n    logo: [],\n    startdate: new Date(),\n    enddate: new Date(),\n    surveyvisibility: \"\",\n    questions: [],\n  });\n\n  const [questiongroups, setQuestionGroups] = useState([]);\n  const [templates, setTemplates] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [addedQuestions, setAddedQuestions] = useState([]);\n  useEffect(() => {\n    if (!mounted.current) {\n      mounted.current = true;\n\n      getStartupData();\n    } else {\n      if (\n        survey.surveyname &&\n        survey.description &&\n        survey.template &&\n        survey.questiongroup &&\n        survey.startdate &&\n        survey.enddate &&\n        survey.surveyvisibility &&\n        survey.logo.length > 0 &&\n        survey.companyname\n      ) {\n        console.log(proceed);\n        setProceed(false);\n      }\n    }\n  });\n\n  const getStartupData = () => {\n    axios.get(\"http://139.59.244.122:1337/questiongroups\").then((res) => {\n      setQuestionGroups(() => [...res.data]);\n      console.log(questiongroups);\n    });\n    axios.get(\"http://139.59.244.122:1337/templates\").then((res) => {\n      setTemplates(() => [...res.data]);\n      console.log(templates);\n    });\n  };\n\n  // Proceed to next step\n  const nextStep = () => {\n    const { step } = survey;\n    setSurvey((prevState) => ({\n      ...prevState,\n      step: step + 1,\n    }));\n  };\n\n  // Proceed to prev step\n  const prevStep = () => {\n    const { step } = survey;\n    setSurvey((prevState) => ({\n      ...prevState,\n      step: step - 1,\n    }));\n  };\n\n  // Handle Change\n  const handleChange = (value, input) => {\n    setSurvey((prevState) => ({\n      ...prevState,\n      [input]: value,\n    }));\n  };\n\n  // Set Date\n  const setDate = (date, input) => {\n    setSurvey((prevState) => ({\n      ...prevState,\n      [input]: date,\n    }));\n  };\n\n  // Set File\n  const setFiles = (event, input) => {\n    let files = event.target.files;\n\n    console.log(files);\n    setSurvey((prevState) => ({ ...prevState, [input]: files }));\n  };\n\n  // Set Questions\n  const setQuestions = (val, index) => {\n    const tempArr = survey.questions;\n    console.log(index);\n    console.log(tempArr.length);\n    if (index <= tempArr.length) {\n      tempArr[index] = val;\n    } else {\n      tempArr.push(val);\n    }\n    setSurvey((prevState) => ({\n      ...prevState,\n      questions: tempArr,\n    }));\n  };\n\n  // Remove Questions\n  const removeQuestion = (index) => {\n    const tmpArr = survey.questions;\n    tmpArr.splice(index, 1);\n    setSurvey((prevState) => ({\n      ...prevState,\n      questions: tmpArr,\n    }));\n  };\n\n  const { step } = survey;\n  const {\n    surveyname,\n    description,\n    template,\n    companyname,\n    questiongroup,\n    startdate,\n    enddate,\n    logo,\n    surveyvisibility,\n    questions,\n  } = survey;\n\n  const values = {\n    surveyname,\n    description,\n    template,\n    companyname,\n    questiongroup,\n    startdate,\n    enddate,\n    logo,\n    surveyvisibility,\n    questions,\n  };\n\n  // Set Question Group\n  const setQuestionGroup = (e) => {\n    const promise = new Promise((resolve, reject) => {\n      const val = e.target.value;\n      setSurvey((prevState) => ({ ...prevState, questiongroup: val }));\n      resolve(val);\n    });\n    promise.then((val) => {\n      console.log(val);\n      let questiongroup = questiongroups.find((o) => o.Name === val);\n      setSuggestions(() => questiongroup.questionapis);\n      console.log(questiongroup.questionapis);\n    });\n  };\n\n  const onSubmit = () => {\n    // compare added questions with questions inside question group.\n    const unknownQuestions = [];\n\n    let questiongroup = questiongroups.find(\n      (o) => o.Name === survey.questiongroup\n    );\n    console.log(questiongroup.questionapis);\n    console.log(`Added Questions length: ${addedQuestions.length}`);\n    console.log(\n      `Question Group Questions length: ${questiongroup.questionapis.length}`\n    );\n    console.log(addedQuestions);\n    console.log(questiongroup.questionapis);\n    console.log(questiongroup.questionapis.length);\n\n    let promise = new Promise((resolve, reject) => {\n      for (let i = 0; i < addedQuestions.length; i++) {\n        for (let j = 0; j < questiongroup.questionapis.length; j++) {\n          console.log(`i:${i},j:${j}`);\n          if (\n            addedQuestions[i].description ===\n            questiongroup.questionapis[j].Description\n          ) {\n            console.log(\"same\");\n\n            // if same make sure the id is inside the questions\n            const id = questiongroup.questionapis[j].id;\n            console.log(survey.questions.includes(id));\n            if (!survey.questions.includes(id)) {\n              const tmpArr = survey.questions;\n              tmpArr.push(id);\n              setSurvey((prevState) => ({\n                ...prevState,\n                questions: tmpArr,\n              }));\n            }\n            console.log(`i:${i},j:${j}`);\n            break;\n          } else if (j === questiongroup.questionapis.length - 1) {\n            console.log(\"different\");\n\n            unknownQuestions.push(addedQuestions[i]);\n            console.log(unknownQuestions);\n\n            if (survey.questions.includes(addedQuestions[i].id)) {\n              console.log(\"duplicate found\");\n              const index = survey.questions.indexOf(addedQuestions[i].id);\n              console.log(\"removing\");\n              const tmpArr = survey.questions;\n              tmpArr.splice(index, 1);\n              setSurvey((prevstate) => ({\n                ...prevstate,\n                questions: tmpArr,\n              }));\n            }\n\n            unknownQuestions.map((question, index) => {\n              question.options.map((option, i) => {\n                if (!option.visiblity) {\n                  question.options.pop(i);\n                }\n              });\n            });\n          }\n        }\n      }\n\n      console.log(unknownQuestions);\n      resolve(unknownQuestions);\n    });\n    promise\n      .then((val) => {\n        console.log(val);\n\n        console.log(`Unknown Questions:`);\n        console.log(unknownQuestions);\n        unknownQuestions.map((question) => {\n          axios\n            .post(\"http://139.59.244.122:1337/questionapis\", question)\n            .then((res) => {\n              console.log(res);\n              const tmpArr = survey.questions;\n              tmpArr.push(res.data.id);\n\n              setSurvey((prevState) => ({\n                ...prevState,\n                questions: tmpArr,\n              }));\n            });\n        });\n      })\n      .then(() => {\n        const formData = new FormData();\n        const data = {};\n        Array.from(survey.logo).forEach((image) => {\n          formData.append(\"files\", image);\n        });\n        axios\n          .post(`http://139.59.244.122:1337/upload`, formData, {\n            headers: { \"Content-Type\": \"multipart/form-data\" },\n          })\n          .then((res) => {\n            const startdate = `${survey.startdate.getUTCFullYear()}-${\n              survey.startdate.getUTCMonth() + 1\n            }-${survey.startdate.getUTCDate()}`;\n\n            const enddate = `${survey.enddate.getUTCFullYear()}-${\n              survey.enddate.getUTCMonth() + 1\n            }-${survey.enddate.getUTCDate()}`;\n            data.surveyname = survey.surveyname;\n            data.description = survey.description;\n            data.owner = user.id;\n\n            data.Startdate = startdate;\n            data.Enddate = enddate;\n            data.companyname = survey.companyname;\n\n            data.template = survey.template;\n            data.questiongroup = survey.questiongroup;\n            data.surveyvisibility = survey.surveyvisibility;\n            data.collaborators = [user.id];\n            data.questions = survey.questions;\n            data.logo = res.data;\n            return data;\n          })\n          .then((formData) => {\n            console.log(formData);\n            axios\n              .post(`http://139.59.244.122:1337/surveyforms`, formData)\n              .then((res) => {\n                console.log(res.data);\n                return res.data;\n              })\n              .then((data) => {\n                data = {\n                  surveyform: data.id,\n                };\n                axios\n                  .post(`http://139.59.244.122:1337/publishsurveys`, data)\n                  .then((res) => {\n                    console.log(res.data);\n                    setPublishUrl(res.data);\n                    return data;\n                  })\n                  .then((data) => {\n                    const survey_id = data.surveyform;\n                    console.log(data);\n                    const postData = {\n                      surveyform: survey_id,\n                      questionapis: survey.questions,\n                    };\n                    axios\n                      .post(\n                        `http://139.59.244.122:1337/surveyquestions`,\n                        postData\n                      )\n                      .then((res) => {\n                        console.log(res.data);\n\n                        nextStep();\n                      });\n                  });\n              })\n              .catch((err) => {\n                console.log(err);\n              });\n          })\n          .catch((err) => {\n            console.log(err);\n          });\n      });\n  };\n\n  return (\n    <>\n      <CModal\n        show={props.modal}\n        onClose={() => {\n          props.toggle();\n          survey.step = 1;\n          setSurvey((prevState) => ({\n            ...prevState,\n            step: 1,\n            surveyname: \"\",\n            description: \"\",\n            template: \"\",\n            companyname: \"\",\n            questiongroup: \"\",\n            startdate: \"\",\n            enddate: \"\",\n            logo: [],\n            surveyvisibility: \"\",\n            questions: \"\",\n          }));\n        }}\n      >\n        <CModalHeader closeButton>\n          {\n            {\n              1: \"Create Survey\",\n              2: \"Add Questions\",\n            }[survey.step]\n          }\n        </CModalHeader>\n        {\n          {\n            1: (\n              <FormSurveyDetails\n                templates={templates}\n                questiongroups={questiongroups}\n                setDate={setDate}\n                setFiles={setFiles}\n                setQuestionGroup={setQuestionGroup}\n                handleChange={handleChange}\n                values={values}\n              />\n            ),\n            2: (\n              <FormQuestionDetails\n                setQuestions={setQuestions}\n                handleChange={handleChange}\n                suggestions={suggestions}\n                removeQuestion={removeQuestion}\n                survey={survey}\n                setAddedQuestions={setAddedQuestions}\n              />\n            ),\n            3: (\n              <>\n                <CCard>\n                  <CCardBody>\n                    <h4>Sucessfully published the survey.</h4>\n                    <CAlert color=\"primary\">{publishUrl[0]}</CAlert>\n                  </CCardBody>\n                </CCard>\n              </>\n            ),\n          }[survey.step]\n        }\n        <CModalFooter>\n          {\n            {\n              1: (\n                <>\n                  <CButton\n                    color=\"primary\"\n                    disabled={proceed}\n                    onClick={() => {\n                      nextStep();\n                    }}\n                  >\n                    Proceed\n                  </CButton>\n                  <CButton\n                    color=\"secondary\"\n                    onClick={() => {\n                      setSurvey((prevState) => ({\n                        ...prevState,\n                        step: 1,\n                        surveyname: \"\",\n                        description: \"\",\n                        template: \"\",\n                        companyname: \"\",\n                        questiongroup: \"\",\n                        startdate: \"\",\n                        enddate: \"\",\n                        logo: [],\n                        surveyvisibility: \"\",\n                        questions: \"\",\n                      }));\n                      setProceed(true);\n                      props.toggle();\n                    }}\n                  >\n                    Cancel\n                  </CButton>\n                </>\n              ),\n              2: (\n                <>\n                  <CButton color=\"success\" onClick={onSubmit}>\n                    Submit\n                  </CButton>\n                  <CButton\n                    color=\"secondary\"\n                    onClick={() => {\n                      setSurvey((prevState) => ({\n                        ...prevState,\n                        step: 1,\n                      }));\n                      getStartupData();\n                      props.toggle();\n                      setProceed(true);\n                    }}\n                  >\n                    Cancel\n                  </CButton>\n                </>\n              ),\n              3: (\n                <>\n                  <CButton\n                    onClick={() => {\n                      history.push(\"/\");\n                    }}\n                    color=\"success\"\n                  >\n                    Done\n                  </CButton>\n                </>\n              ),\n            }[survey.step]\n          }\n        </CModalFooter>\n      </CModal>\n    </>\n  );\n};\n\nexport default FormModal;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  CRow,\n  CCol,\n  CCardBody,\n  CCardFooter,\n  CCard,\n  CCardImg,\n} from \"@coreui/react\";\nimport axios from \"axios\";\nimport CIcon from \"@coreui/icons-react\";\nimport { freeSet } from \"@coreui/icons\";\nimport AuthContext from \"../../context/auth/authContext\";\nimport FormModal from \"../formModal/FormModal\";\n\nconst Dashboard = () => {\n  const authContext = useContext(AuthContext);\n  const { user } = authContext;\n  const [surveys, setSurveys] = useState([]);\n  const [modal, setModal] = useState(false);\n\n  const toggle = () => {\n    console.log(\"Toggled\");\n    setModal(!modal);\n  };\n\n  useEffect(() => {\n    axios\n      .get(`http://139.59.244.122:1337/surveyforms?owner=${user.id}`)\n      .then(async (res) => {\n        console.log(res.data);\n        const temp = [];\n        await res.data.map((surveyData, index) => {\n          const id = surveyData.id;\n          const surveyname = surveyData.surveyname;\n          const previewimage = surveyData.previewimage\n            ? `http://139.59.244.122:1337${surveyData.previewimage.url}`\n            : \"\";\n          const survey = {\n            id: id,\n            surveyname: surveyname,\n            thumbnail: previewimage,\n          };\n          temp.push(survey);\n        });\n        return temp;\n      })\n      .then((temp) => {\n        setSurveys(() => [...temp]);\n      });\n    authContext.loadUser();\n    //eslint-disable-next-line\n  }, []);\n\n  const addSurvey = () => {\n    toggle();\n    console.log(\"Survey Added\");\n    let temp = {\n      id: 21,\n      surveyname: \"New Survey\",\n      thumbnail: \"preivew.jpg\",\n    };\n    setSurveys((oldArray) => [...oldArray, temp]);\n  };\n\n  return (\n    <>\n      <FormModal modal={modal} toggle={toggle} />\n      <CRow>\n        <CCol sm=\"6\" lg=\"3\">\n          <CCard onClick={addSurvey} style={{ cursor: \"pointer\" }}>\n            <CCardBody>\n              <CCardImg>\n                <CIcon size={\"lg\"} content={freeSet.cilPlus} />\n              </CCardImg>\n            </CCardBody>\n            <CCardFooter>Add Survey</CCardFooter>\n          </CCard>\n        </CCol>\n        {surveys.map((survey, index) => (\n          <CCol sm=\"6\" lg=\"3\">\n            {console.log(survey)}\n            <Link to={`/survey/${survey.id}`} className=\"surveyItems\">\n              <CCard style={{ cursor: \"pointer\" }}>\n                <CCardBody>\n                  <CCardImg src={`${survey.thumbnail}`}></CCardImg>\n                </CCardBody>\n                <CCardFooter\n                  style={{\n                    overflow: \"hidden\",\n                    whiteSpace: \"nowrap\",\n                    textOverflow: \"ellipsis\",\n                    color: \"#3c4b64\",\n                  }}\n                >\n                  {survey.surveyname}\n                  <div\n                    className=\"card-header-actions\"\n                    style={{ float: \"right\", position: \"absolute\", right: 8 }}\n                  >\n                    <CIcon content={freeSet.cilOptions} />\n                  </div>\n                </CCardFooter>\n              </CCard>\n            </Link>\n          </CCol>\n        ))}\n      </CRow>\n    </>\n  );\n};\n\nexport default Dashboard;\n"],"sourceRoot":""}