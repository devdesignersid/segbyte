{"version":3,"sources":["views/notifications/alerts/Alerts.js","views/pages/register/Register.js"],"names":["Alerts","alertContext","useContext","AlertContext","alerts","length","map","alert","xs","md","color","type","msg","Register","props","authContext","AuthContext","setAlert","register","error","clearErrors","isAuthenticated","useEffect","history","push","useState","username","email","password","password2","user","setUser","onChange","e","target","name","value","className","lg","xl","placeholder","autoComplete","onClick","block"],"mappings":"gOAiCeA,IAlBA,WACb,IAAMC,EAAeC,qBAAWC,KAEhC,OACEF,EAAaG,OAAOC,OAAS,GAC7BJ,EAAaG,OAAOE,KAAI,SAACC,GAAD,OACtB,cAAC,IAAD,CAAMC,GAAG,KAAKC,GAAG,IAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAQC,MAAOH,EAAMI,KAArB,SAA4BJ,EAAMK,kB,gIC4H/BC,UAjIE,SAACC,GAChB,IAAMb,EAAeC,qBAAWC,KAC1BY,EAAcb,qBAAWc,KACvBC,EAAahB,EAAbgB,SACAC,EAAkDH,EAAlDG,SAAUC,EAAwCJ,EAAxCI,MAAOC,EAAiCL,EAAjCK,YAAaC,EAAoBN,EAApBM,gBAEtCC,qBAAU,WACJD,GACFP,EAAMS,QAAQC,KAAK,KAEP,4BAAVL,IACFF,EAASE,EAAO,UAChBC,OAGD,CAACD,EAAOE,EAAiBP,EAAMS,UAfR,MAiBFE,mBAAS,CAC/BC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,UAAW,KArBa,mBAiBnBC,EAjBmB,KAiBbC,EAjBa,KAwBlBL,EAAyCI,EAAzCJ,SAAUC,EAA+BG,EAA/BH,MAAOC,EAAwBE,EAAxBF,SAAUC,EAAcC,EAAdD,UAE7BG,EAAW,SAACC,GAAD,OACfF,EAAQ,2BACHD,GADE,kBAEJG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAiB9B,OACE,qBAAKC,UAAU,qDAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAMA,UAAU,yBAAhB,UACE,cAAC,IAAD,CAAM5B,GAAG,IAAI6B,GAAG,IAAIC,GAAG,IAAvB,SACE,cAAC,IAAD,CAAOF,UAAU,OAAjB,SACE,cAAC,IAAD,CAAWA,UAAU,MAArB,SACE,eAAC,IAAD,WACE,0CACA,mBAAGA,UAAU,aAAb,iCACA,eAAC,IAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOF,KAAK,iBAGhB,cAAC,IAAD,CACExB,KAAK,OACL6B,YAAY,WACZC,aAAa,WACbN,KAAK,WACLC,MAAOV,EACPM,SAAUA,OAGd,eAAC,IAAD,CAAaK,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,kBAEF,cAAC,IAAD,CACE1B,KAAK,OACL6B,YAAY,QACZC,aAAa,QACbN,KAAK,QACLC,MAAOT,EACPK,SAAUA,OAGd,eAAC,IAAD,CAAaK,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOF,KAAK,wBAGhB,cAAC,IAAD,CACExB,KAAK,WACL6B,YAAY,WACZC,aAAa,eACbN,KAAK,WACLC,MAAOR,EACPI,SAAUA,OAGd,eAAC,IAAD,CAAaK,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOF,KAAK,wBAGhB,cAAC,IAAD,CACExB,KAAK,WACL6B,YAAY,kBACZC,aAAa,eACbN,KAAK,YACLC,MAAOP,EACPG,SAAUA,OAGd,cAAC,IAAD,CAAStB,MAAM,UAAUgC,QAlFxB,SAACT,GACC,KAAbP,GAA6B,KAAVC,GAA6B,KAAbC,EACrCX,EAAS,2BAA4B,UAC5BW,IAAaC,EACtBZ,EAAS,0BAA2B,UAEpCC,EAAS,CACPQ,WACAC,QACAC,cAyEsDe,OAAK,EAAjD,qCAQR,cAAC,IAAD","file":"static/js/6.be021743.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport {\n  CAlert,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CLink,\n  CProgress,\n  CRow,\n} from \"@coreui/react\";\nimport { DocsLink } from \"src/reusable\";\nimport AlertContext from \"../../../context/alert/alertContext\";\n\nconst Alerts = () => {\n  const alertContext = useContext(AlertContext);\n\n  return (\n    alertContext.alerts.length > 0 &&\n    alertContext.alerts.map((alert) => (\n      <CCol xs=\"12\" md=\"6\">\n        <CCard>\n          <CCardHeader>Alert</CCardHeader>\n          <CCardBody>\n            <CAlert color={alert.type}>{alert.msg}</CAlert>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    ))\n  );\n};\n\nexport default Alerts;\n","import React, { useContext, useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport AlertContext from \"../../../context/alert/alertContext\";\nimport Alerts from \"src/views/notifications/alerts/Alerts\";\nimport AuthContext from \"../../../context/auth/authContext\";\n\nconst Register = (props) => {\n  const alertContext = useContext(AlertContext);\n  const authContext = useContext(AuthContext);\n  const { setAlert } = alertContext;\n  const { register, error, clearErrors, isAuthenticated } = authContext;\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      props.history.push(\"/\");\n    }\n    if (error === \"Email is already taken.\") {\n      setAlert(error, \"danger\");\n      clearErrors();\n    }\n    //eslint-disable-next-line\n  }, [error, isAuthenticated, props.history]);\n\n  const [user, setUser] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\",\n  });\n\n  const { username, email, password, password2 } = user;\n\n  const onChange = (e) =>\n    setUser({\n      ...user,\n      [e.target.name]: e.target.value,\n    });\n\n  const onSubmit = (e) => {\n    if (username === \"\" || email === \"\" || password === \"\") {\n      setAlert(\"Please enter all fields!\", \"danger\");\n    } else if (password !== password2) {\n      setAlert(\"Passwords do not match!\", \"danger\");\n    } else {\n      register({\n        username,\n        email,\n        password,\n      });\n    }\n  };\n\n  return (\n    <div className=\"c-app c-default-layout flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md=\"9\" lg=\"7\" xl=\"6\">\n            <CCard className=\"mx-4\">\n              <CCardBody className=\"p-4\">\n                <CForm>\n                  <h1>Register</h1>\n                  <p className=\"text-muted\">Create your account</p>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-user\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"text\"\n                      placeholder=\"Username\"\n                      autoComplete=\"username\"\n                      name=\"username\"\n                      value={username}\n                      onChange={onChange}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>@</CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"text\"\n                      placeholder=\"Email\"\n                      autoComplete=\"email\"\n                      name=\"email\"\n                      value={email}\n                      onChange={onChange}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-3\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      autoComplete=\"new-password\"\n                      name=\"password\"\n                      value={password}\n                      onChange={onChange}\n                    />\n                  </CInputGroup>\n                  <CInputGroup className=\"mb-4\">\n                    <CInputGroupPrepend>\n                      <CInputGroupText>\n                        <CIcon name=\"cil-lock-locked\" />\n                      </CInputGroupText>\n                    </CInputGroupPrepend>\n                    <CInput\n                      type=\"password\"\n                      placeholder=\"Repeat password\"\n                      autoComplete=\"new-password\"\n                      name=\"password2\"\n                      value={password2}\n                      onChange={onChange}\n                    />\n                  </CInputGroup>\n                  <CButton color=\"success\" onClick={onSubmit} block>\n                    Create Account\n                  </CButton>\n                </CForm>\n              </CCardBody>\n            </CCard>\n          </CCol>\n\n          <Alerts />\n        </CRow>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default Register;\n"],"sourceRoot":""}